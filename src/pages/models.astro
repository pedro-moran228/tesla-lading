---
import LayoutHeader from "../components/LayoutHeader.astro";
import FreedomTravelSection from "../components/models/FreedomTravelSection.astro";
import Layout from "../layouts/Layout.astro";
---

<Layout title="Welcome to Astro.">
  <!-- <main class="h-screen relative">
    <LayoutHeader color="black"/>

    <div class="absolute w-full h-full z-10">
      <img
        src={"/Model-S-homepage-desktop.avif"}
        alt={"Model-S"}
        class="w-full h-full object-cover"
      />
    </div>

    <section
      class="absolute z-20 h-full w-full opacity-0 flex flex-col justify-between text-center"
    >
      <header>
        <h1 class="text-[39px] mt-[17.5vh] font-medium">Model 3</h1>
        <a
          class="text-sm shadow-[0_1px_0_0_#171A20] cursor-pointer hover:shadow-[0_2px_0_0_#171A20] duration-300"
          >Lease from $399/mo</a
        >
      </header>
      <footer
        class="grid grid-cols-[repeat(2,264px)] place-content-center gap-[24px] pb-[80px]"
      >
        <a
          href="#"
          class="rounded bg-[rgba(23,_26,_32,_0.8)] text-sm font-medium h-[40px] flex items-center justify-center text-black hover:bg-[#171A20] transition-colors duration-300"
          >Order Now</a
        >
        <a
          href="#"
          class="rounded bg-[rgba(244,_244,_244,_0.65)] text-sm font-medium h-[40px] flex items-center justify-center text-[#393c41] hover:bg-white hover:text-black transition-colors duration-300"
          >Demo Drive</a
        >
      </footer>
    </section>
  </main> -->
  <FreedomTravelSection />
</Layout>

<script>
  // let pathElements = document.querySelectorAll(".tooltip");
  // let datasss = {
  //   g10: [],
  // };

  // let observer = new MutationObserver((mutations) => {
  //   mutations.forEach(({ attributeName, target }, index) => {
  //     let newValue = target.getAttribute(attributeName);
  //     const indexOfEl = [...pathElements].indexOf(target);

  //     if (newValue !== "null") {
  //       if (datasss[`g-${indexOfEl}`]) {
  //         datasss[`g-${indexOfEl}`] = [...datasss[`g-${indexOfEl}`], newValue];
  //       } else {
  //         datasss[`g-${indexOfEl}`] = [newValue];
  //       }
  //     }

  //     console.log(datasss);
  //   });
  // });

  // let config = { attributes: true, childList: false, subtree: false };

  // pathElements.forEach((path) => {
  //   observer.observe(path, config);
  // });
</script>
