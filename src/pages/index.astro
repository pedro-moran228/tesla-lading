---
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Swiper demo</title>
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1"
    />
    <link rel="stylesheet" href="/swiper-bundle.min.css" />
    <style>
      html,
      body {
        position: relative;
        height: 100%;
      }

      body {
        background: #eee;
        font-family: Helvetica Neue, Helvetica, Arial, sans-serif;
        font-size: 14px;
        color: #000;
        margin: 0;
        padding: 0;
      }

      .swiper {
        width: 100%;
        height: 100%;
      }

      .swiper-slide {
        text-align: center;
        font-size: 18px;
        background: #fff;
        display: flex;
        justify-content: center;
        align-items: center;
      }

      .swiper-slide img {
        display: block;
        width: 100%;
        height: 100%;
        object-fit: cover;
      }
    </style>
  </head>

  <body>
    <div class="swiper mySwiper">
      <div class="swiper-wrapper">
        <div class="swiper-slide">Slide 1</div>
        <div class="swiper-slide">Slide 2</div>
        <div class="swiper-slide">Slide 3</div>
        <div class="swiper-slide">Slide 4</div>
        <div class="swiper-slide">Slide 5</div>
        <div class="swiper-slide">Slide 6</div>
        <div class="swiper-slide">Slide 7</div>
        <div class="swiper-slide">Slide 8</div>
        <div class="swiper-slide">Slide 9</div>
      </div>
      <div class="swiper-pagination"></div>
    </div>

    <script type="module">
      import Swiper from "/swiper-bundle.esm.browser.min.js";

      new Swiper(".mySwiper", {
        direction: "vertical",
        slidesPerView: 1,
        mousewheel: true,
        spaceBetween: 30,
        pagination: {
          el: ".swiper-pagination",
          clickable: true,
        },
      });

    </script>
  </body>
</html>

<!-- <Layout title="Tesla">
  <LayoutHeader color="white" />
  <div
    id="home-page-box"
    class="scroll-smooth h-[calc(100vh-1px)] sm:snap-y snap-mandatory overflow-y-scroll after:z-[99999] after:content-[''] after:absolute after:bottom-[-1px] after:w-full after:border-b-[2px] after:border-[#000000]"
  >
    <HomeHeroSection />
    <Model3Section />
    <AccessoriesSection />
  </div>
</Layout> -->

<!-- <script>
  const $sliderBox = document.querySelector("#home-page-box") as HTMLElement;
  const $eles = [...document.querySelectorAll(".h-screen")] as HTMLElement[];
  let cursorPositionRef = [0];
  let prevXRef = { prevPageY: 0, prevScrollTop: 0 };
  let dragActived = false;

  const resizeBoxes = () => {
    $eles.forEach((el, i) => {
      if (i + 1 !== $eles.length) {
        el.style.height = `${window.innerHeight}px`;
      }
    });
  };

  window.addEventListener("resize", resizeBoxes);

  $sliderBox.addEventListener("touchmove", (e: TouchEvent) => {
    // !e.touches && e.preventDefault();

    const mousePosition = e.touches[0].pageY - prevXRef.prevPageY;
    cursorPositionRef.push(mousePosition);
    // $sliderBox!.scrollTop = prevXRef.prevScrollTop - mousePosition;
  });

  $sliderBox.addEventListener("touchstart", (e) => {
    dragActived = true;

    prevXRef = {
      prevPageY: e.touches[0].pageY,
      prevScrollTop: $sliderBox!.scrollTop,
    };
  });

  $sliderBox.addEventListener("touchend", (e) => {
    if (!dragActived) return;
    autoCenterScroll();
    dragActived = false;
  });

  const getScrollingDirection = () => {
    let goNext = false;
    const lastElement = cursorPositionRef.at(-1) ?? 0;
    const smallestNumber = Math.min(...cursorPositionRef);
    const biggestNumber = Math.max(...cursorPositionRef);

    if (lastElement === smallestNumber) {
      goNext = true;
    }
    if (lastElement === biggestNumber) {
      goNext = false;
    } else if (lastElement > 0) {
      goNext = true;
    }

    cursorPositionRef = [0];
    return { goNext };
  };

  const autoCenterScroll = () => {
    const sliderHeight = $sliderBox!.offsetHeight;
    const { goNext } = getScrollingDirection();

    //* next and prev are based on the current carousel top width no visible
    const next = Math.round(
      ($sliderBox!.scrollTop + sliderHeight / 2) / sliderHeight
    );
    const prev = Math.round(
      ($sliderBox!.scrollTop - sliderHeight / 2) / sliderHeight
    );
    // const itemsTop = Math.round(carousel!.scrollTop / sliderHeight);

    if (goNext) {
      //*: next * sliderHeight = new top width no visible
      console.log(next * sliderHeight);
      $sliderBox!.scrollTop = next * sliderHeight;
    } else {
      //*: prev * sliderHeight = new top width no visible
      $sliderBox!.scrollTop = prev * sliderHeight;
    }
  };
</script> -->
