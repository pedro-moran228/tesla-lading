---
import LayoutHeader from "../LayoutHeader.astro";

interface Props {
  homeSectionName: string;
  headerColor?: string;
  image?: { src: string; alt: string };
  video?: { src: string };
}

const {
  homeSectionName,
  image,
  video,
  headerColor = "transparent",
} = Astro.props;
---

<section
  data-section-name={`section-${homeSectionName}`}
  data-header-color={headerColor}
  class="h-screen relative snap-center"
>
  <LayoutHeader />
  {
    video && (
      <div class="absolute w-full h-full z-10">
        <video
          class="w-full h-full object-cover object-center"
          src={video.src}
          autoplay
          muted
          loop
        />
      </div>
    )
  }

  {
    image && (
      <div class="absolute w-full h-full z-10">
        <img
          src={image?.src}
          alt={image?.alt}
          class="w-full h-full object-cover"
        />
      </div>
    )
  }

  <section
    data-section-content={`section-${homeSectionName}-content`}
    class="absolute z-20 h-full w-full opacity-0 flex flex-col justify-between text-center"
  >
    <slot />
  </section>
</section>

<script>
  const options = {
    root: null,
    rootMargin: "0px",
    threshold: 0.75,
  };

  const $sections = document.querySelectorAll(
    "[data-section-name]"
  ) as NodeListOf<Element>;

  const $sectionsContent = document.querySelectorAll(
    "[data-section-content]"
  ) as NodeListOf<Element>;
    
  const $homePage = document.querySelector("#home-page");
  const $header = document.querySelector("#leading-header") as HTMLElement;
  
  function getVisiblePercentage(element) {
    const rect = element.getBoundingClientRect();
    const windowHeight =
      window.innerHeight || document.documentElement.clientHeight;

    const totalHeight = rect.bottom - rect.top;
    
    const outsideViewportHeight =
    Math.max(0, rect.top < 0 ? Math.abs(rect.top) : 0) +
    Math.max(
      0,
        rect.bottom - windowHeight > 0 ? rect.bottom - windowHeight : 0
        );
        
        const insideViewportHeight = totalHeight - outsideViewportHeight;
        
        const visiblePercentage = (insideViewportHeight / totalHeight) * 100;

    return visiblePercentage;
  }

  const createScrollHandler = (
    $section,
    $sectionContent,
    headerColor
  ) => {
    return () => {
      const topDistance = $section.getBoundingClientRect().top;

      // verify if scroll is working fine for each section
      // console.log($section.attributes.getNamedItem("data-section-name").value);

      const $prevSection = $section.previousElementSibling as HTMLElement || null;
      const prevHeaderColor =
        $prevSection?.attributes.getNamedItem("data-header-color").value ?? headerColor;

      if (topDistance <= 30) {
        $header.style.color = headerColor;
      } else {
        $header.style.color = prevHeaderColor;
      }

      const visiblePercentage = Math.round(getVisiblePercentage($section));
      $sectionContent.style.bottom = `${topDistance}px`;
      // 75% of visiblePercentage is equal to 0 opacity and 100% is equal to 1 opacity
      // (this increments the velocity of the opacity change)
      $sectionContent.style.opacity = `${(visiblePercentage - 75) / 25}`;
    };
  };

  const scrollHandlers = {};

  let observer = new IntersectionObserver((entries) => {
    entries.forEach(({ target: $section, isIntersecting }) => {
      const sectionName =
        $section.attributes.getNamedItem("data-section-name").value;

      const $sectionContent = [...$sectionsContent].find((el) => {
        return (
          el.attributes.getNamedItem("data-section-content").value ===
          `${sectionName}-content`
        );
      }) as HTMLElement;

      const headerColor =
        $section.attributes.getNamedItem("data-header-color").value;

      if (isIntersecting) {
        //Default effects
        const visiblePercentage = Math.round(getVisiblePercentage($section));
        const topDistance = $section.getBoundingClientRect().top;

        $sectionContent.style.opacity = `${(visiblePercentage - 75) / 25}`;
        $sectionContent.style.zIndex = "20";

        if (topDistance <= 30) {
          $header.style.color = headerColor;
        }

        // Only create the function if it doesn't already exist
        if (!scrollHandlers[sectionName]) {
          scrollHandlers[sectionName] = createScrollHandler(
            $section,
            $sectionContent,
            headerColor
          );
        }

        $homePage.addEventListener("scroll", scrollHandlers[sectionName]);
      } else {
        $homePage.removeEventListener("scroll", scrollHandlers[sectionName]);
        $sectionContent.style.zIndex = "-1";
      }
    });
  }, options);

  $sections.forEach((section) => {
    observer.observe(section);
  });
</script>
