---
interface Props {
  homeSectionName: string;
  headerColor?: string;
  image?: { srcMobile: string; srcDesktop: string; alt: string };
  video?: { src: string };
}

const {
  homeSectionName,
  image,
  video,
  headerColor = "transparent",
} = Astro.props;
---

<section
  data-section-content={`section-${homeSectionName}-content`}
  class="w-full sticky z-10 top-0 left-0 opacity-0 flex flex-col justify-between text-center pb-[50px] sm:pb-[80px] pt-[17.5vh]"
>
  <slot />
</section>

{
  video && (
    <section
      data-section-name={`section-${homeSectionName}`}
      data-header-color={headerColor}
      class="w-full h-screen snap-center"
    >
      <video
        class="w-full h-full object-cover object-center"
        src={video.src}
        autoplay
        muted
        loop
      />
    </section>
  )
}

{
  image && (
    <section
      data-section-name={`section-${homeSectionName}`}
      data-header-color={headerColor}
      class="w-full h-screen snap-center"
    >
      <picture>
        <source srcset={image.srcMobile} media="(max-width: 639px)" />
        <source srcset={image.srcDesktop} media="(min-width: 640px)" />
        <source
          srcset={image.srcMobile}
          media="(min-width: 640px) and (orientation:portrait)"
        />
        <img
          class="h-full w-full object-top xs:object-[0px_35%] sm:object-center object-cover"
          src={image.srcDesktop}
          srcset={image.srcDesktop}
          alt="Home outfitted with Tesla Solar Roof"
        />
      </picture>
    </section>
  )
}

<script>
  const options = {
    root: null,
    rootMargin: "0px",
    threshold: 0.6,
  };

  const $sections = [
    ...document.querySelectorAll("[data-section-name]"),
  ] as HTMLElement[];

  const $sectionsContents = [
    ...document.querySelectorAll("[data-section-content]"),
  ] as HTMLElement[];

  const $homePageBox = document.querySelector("#home-page-box");
  const $header = document.querySelector("#lading-header") as HTMLElement;

  $sectionsContents.forEach((el) => {
    el.style.height = `${$homePageBox.clientHeight}px`;
    el.style.marginTop = `-${$homePageBox.clientHeight}px`;
  });

  window.addEventListener("resize", () => {
    $sectionsContents.forEach((el) => {
      el.style.height = `${$homePageBox.clientHeight}px`;
      el.style.marginTop = `-${$homePageBox.clientHeight}px`;
    });
  });

  function getVisiblePercentage(element) {
    const rect = element.getBoundingClientRect();
    const windowHeight =
      window.innerHeight || document.documentElement.clientHeight;

    const totalHeight = rect.bottom - rect.top;

    const outsideViewportHeight =
      Math.max(0, rect.top < 0 ? Math.abs(rect.top) : 0) +
      Math.max(
        0,
        rect.bottom - windowHeight > 0 ? rect.bottom - windowHeight : 0
      );

    const insideViewportHeight = totalHeight - outsideViewportHeight;

    const visiblePercentage = (insideViewportHeight / totalHeight) * 100;

    return visiblePercentage;
  }

  const calcScrollOpacity = (n) => (n - 60) / 25; // (increments the velocity of the opacity change)

  const createScrollHandler = ($section, $sectionContent, headerColor) => {
    return () => {
      const topDistance = $section.getBoundingClientRect().top;
      // verify if scroll is working fine for each section
      // console.log($section.attributes.getNamedItem("data-section-name").value);

      const sectionIndex = $sections.indexOf($section);
      const $prevSection = ($sections[sectionIndex - 1] as HTMLElement) || null;
      const prevHeaderColor =
        $prevSection?.attributes.getNamedItem("data-header-color")?.value ??
        headerColor;

      if (topDistance <= 30) {
        $header.style.color = headerColor;
      } else {
        $header.style.color = prevHeaderColor;
      }

      const visiblePercentage = Math.round(getVisiblePercentage($section));
      if ($sectionContent) {
        $sectionContent.style.opacity = calcScrollOpacity(visiblePercentage);
      }
    };
  };

  const scrollHandlers = {};

  let observer = new IntersectionObserver((entries) => {
    entries.forEach(({ target: $section, isIntersecting }) => {
      const sectionName =
        $section.attributes.getNamedItem("data-section-name").value;

      const $sectionContent = [...$sectionsContents].find((el) => {
        return (
          el.attributes.getNamedItem("data-section-content").value ===
          `${sectionName}-content`
        );
      }) as HTMLElement;

      const headerColor =
        $section.attributes.getNamedItem("data-header-color").value;

      if (isIntersecting) {
        //Default effects
        const visiblePercentage = Math.round(getVisiblePercentage($section));
        const topDistance = $section.getBoundingClientRect().top;

        if ($sectionContent) {
          $sectionContent.style.opacity = `${calcScrollOpacity(
            visiblePercentage
          )}`;
          $sectionContent.style.zIndex = "20";
        }

        if (topDistance <= 30) {
          $header.style.color = headerColor;
        }

        if (!scrollHandlers[sectionName]) {
          scrollHandlers[sectionName] = createScrollHandler(
            $section,
            $sectionContent,
            headerColor
          );
        }

        $homePageBox.addEventListener("scroll", scrollHandlers[sectionName]);
      } else {
        $homePageBox.removeEventListener("scroll", scrollHandlers[sectionName]);
        if ($sectionContent) {
          $sectionContent.style.opacity = `0`;
          $sectionContent.style.zIndex = "-999";
        }
      }
    });
  }, options);

  $sections.forEach((section) => {
    observer.observe(section);
  });
</script>
